generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TEST
model Customer {
  id    String @id @default(uuid())
  email String @unique
  name  String
  phone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id       String  @id @default(uuid())
  username String  @unique
  email    String  @unique
  phone    String? @db.VarChar(15)
  address  String? @db.Text
  image    String? @db.Text
  role     Role

  student Student?
  teacher Teacher?
  admin   Admin?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id      String   @id @default(uuid())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses Course[] @relation("StudentCourses")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses   Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Course {
  id          String  @id @default(uuid())
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  videoUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  sections    Section[]
  attachments Attachment[]
  purchases   Purchase[]
  students    Student[]    @relation("StudentCourses")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Section {
  id       String @id @default(uuid())
  title    String @db.Text
  position Int

  chapters Chapter[]

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String  @db.Text
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  useProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sectionId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}
